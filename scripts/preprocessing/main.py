# -*- coding: utf-8 -*-
"""Copia de Proyecto_Modulo6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JQ-_dRk2j4Esk77ki_QIbxhD0tFnmUYQ
"""

import pandas as pd

!pip install gdown
import gdown
url = 'https://drive.google.com/uc?id=1-3-nVKJfLry8Fi793lV_Uzvl06Sy2Svb'
gdown.download(url, 'DataFlickr8KDataset.zip', quiet=False)
!unzip -oq DataFlickr8KDataset.zip
!ls
!ls DataFlickr8KDataset
image_path = './DataFlickr8KDataset/Images'
data_path = './DataFlickr8KDataset/captions.txt'

data = pd.read_csv(data_path)
data.head()

import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.preprocessing.image import load_img, img_to_array
import matplotlib.pyplot as plt
from textwrap import wrap

# Función para leer una imagen del sistema de archivos y procesarla
def readImage(path, img_size=224):
    img = load_img(path, color_mode='rgb', target_size=(img_size, img_size))
    img = img_to_array(img)
    img = img / 255.  # Normaliza los valores de los píxeles a [0, 1]
    return img

# Función para mostrar imágenes con sus subtítulos
def display_images(temp_df):
    temp_df = temp_df.reset_index(drop=True)
    plt.figure(figsize=(20, 20))
    for i in range(25):
        plt.subplot(5, 5, i+1)
        plt.subplots_adjust(hspace=0.7, wspace=0.3)
        image = readImage(f"{image_path}/{temp_df['image'][i]}")
        plt.imshow(image)
        plt.title("\n".join(wrap(temp_df['caption'][i], 20)))
        plt.axis("off")

# Muestra las imágenes con sus subtítulos
display_images(data.sample(25).reset_index(drop=True))  # Toma una muestra aleatoria de 25 filas del DataFrame

# Preprocesamiento

import re

def text_preprocessing(data):
    data['caption'] = data['caption'].str.lower()
    data['caption'] = data['caption'].apply(lambda x: re.sub("[^a-z\s]+", "", x))
    data['caption'] = data['caption'].apply(lambda x: re.sub("\s+", " ", x))
    data['caption'] = data['caption'].apply(lambda x: " ".join([word for word in x.split() if len(word) > 1]))
    data['caption'] = "startseq " + data['caption'] + " endseq"
    return data

def text_preprocessing(data):
    data['caption'] = data['caption'].str.lower()
    data['caption'] = data['caption'].apply(lambda x: re.sub("[^a-z\s]+", "", x))
    data['caption'] = data['caption'].apply(lambda x: re.sub("\s+", " ", x))
    data['caption'] = data['caption'].apply(lambda x: " ".join([word for word in x.split() if len(word) > 1]))
    data['caption'] = "startseq " + data['caption'] + " endseq"
    return data

data = text_preprocessing(data)

captions = data['caption'].tolist()
captions[:10]